---
import { icons } from '../config/icons';
---

<div class="relative inline-block">
  <button
    id="iconButton"
    class="w-12 h-12 flex items-center justify-center rounded-full bg-white/80 hover:bg-white shadow-lg hover:shadow-xl transition-all transform hover:-translate-y-1"
    title="Cambiar icono"
  >
    <span id="currentIcon" class="text-2xl">ðŸ‘¤</span>
  </button>
  
  <div
    id="iconPanel"
    class="absolute z-50 mt-2 bg-white rounded-xl shadow-xl p-4 hidden"
    style="width: 280px; left: 50%; transform: translateX(-50%);"
  >
    <div class="grid grid-cols-5 gap-2">
      {icons.map((icon) => (
        <button
          class="w-12 h-12 flex items-center justify-center rounded-lg hover:bg-gray-100 transition-colors"
          data-icon-id={icon.id}
        >
          <span class="text-2xl">{icon.emoji}</span>
        </button>
      ))}
    </div>
  </div>
</div>

<script>
  import { icons } from '../config/icons';
  
  const iconButton = document.getElementById('iconButton');
  const iconPanel = document.getElementById('iconPanel');
  const currentIcon = document.getElementById('currentIcon');

  // Asegurarse de que los elementos existan
  if (!iconButton || !iconPanel || !currentIcon) {
    console.error('No se encontraron elementos necesarios para el ProfileEditor');
  }

  iconButton?.addEventListener('click', (e) => {
    e.stopPropagation(); // Prevenir que el click se propague
    iconPanel?.classList.toggle('hidden');
  });

  // Cerrar al hacer clic fuera
  document.addEventListener('click', (e) => {
    if (!iconButton?.contains(e.target as Node) && !iconPanel?.contains(e.target as Node)) {
      iconPanel?.classList.add('hidden');
    }
  });

  // Actualizar icono cuando se selecciona
  iconPanel?.querySelectorAll('button[data-icon-id]').forEach(button => {
    button.addEventListener('click', async (e) => {
      e.stopPropagation(); // Prevenir que el click se propague
      const iconId = button.getAttribute('data-icon-id');
      if (!iconId) return;
      
      const icon = icons.find(i => i.id === iconId);
      if (icon && currentIcon) {
        currentIcon.textContent = icon.emoji;
      }
      
      document.dispatchEvent(new CustomEvent('iconSelected', {
        detail: { iconId }
      }));
      
      iconPanel.classList.add('hidden');
    });
  });

  // Actualizar el icono actual cuando cambia
  document.addEventListener('updateIcon', (e: CustomEvent<{ iconId: string }>) => {
    const icon = icons.find(i => i.id === e.detail.iconId);
    if (icon && currentIcon) {
      currentIcon.textContent = icon.emoji;
    }
  });
</script> 