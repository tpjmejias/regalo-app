---
import { colorThemes } from '../config/theme';

interface Props {
  selectedTheme?: string;
}

const { selectedTheme = 'pink-violet' } = Astro.props;
---

<div class="relative inline-block">
  <div
    class={`w-24 h-8 rounded-full bg-gradient-to-r ${colorThemes.find(theme => theme.id === selectedTheme)?.gradient || colorThemes[0].gradient}`}
  ></div>
  
  <button
    type="button"
    id="themeSelectorBtn"
    class="absolute -bottom-1 -right-1 w-6 h-6 bg-white rounded-full shadow-lg flex items-center justify-center text-gray-600 hover:text-primary-500 transition-colors"
    title="Cambiar tema de color"
  >
    <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2 2 0 012.828 0l2.829 2.829a2 2 0 010 2.828l-8.486 8.485M7 17h.01" />
    </svg>
  </button>

  <!-- Modal de selecciÃ³n -->
  <div
    id="themeModal"
    class="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 hidden"
    style="margin: 0;"
  >
    <div class="bg-white rounded-2xl p-6 max-w-lg w-full mx-4" style="margin-top: 10vh;">
      <div class="flex justify-between items-center mb-6">
        <h3 class="text-xl font-bold text-gray-900">Elige un tema</h3>
        <button
          type="button"
          class="text-gray-400 hover:text-gray-500"
          id="closeThemeModal"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>

      <div class="grid grid-cols-1 gap-4">
        {colorThemes.map(theme => (
          <button
            type="button"
            class="p-4 rounded-xl hover:bg-gray-50 transition-colors theme-option group flex items-center gap-4"
            data-theme-id={theme.id}
            data-theme-gradient={theme.gradient}
          >
            <div class={`w-16 h-8 rounded-full bg-gradient-to-r ${theme.gradient}`}></div>
            <span class="text-gray-700 group-hover:text-gray-900 font-medium">{theme.name}</span>
          </button>
        ))}
      </div>
    </div>
  </div>
</div>

<script>
  const themeSelectorBtn = document.getElementById('themeSelectorBtn');
  const themeModal = document.getElementById('themeModal');
  const closeThemeModal = document.getElementById('closeThemeModal');
  const themeOptions = document.querySelectorAll('.theme-option');

  // Mostrar modal
  themeSelectorBtn?.addEventListener('click', () => {
    themeModal?.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
  });

  // Cerrar modal
  closeThemeModal?.addEventListener('click', () => {
    themeModal?.classList.add('hidden');
    document.body.style.overflow = '';
  });

  // Cerrar modal al hacer clic fuera
  themeModal?.addEventListener('click', (e) => {
    if (e.target === themeModal) {
      themeModal.classList.add('hidden');
      document.body.style.overflow = '';
    }
  });

  // Seleccionar tema
  themeOptions.forEach(option => {
    option.addEventListener('click', () => {
      const themeId = option.getAttribute('data-theme-id');
      const themeGradient = option.getAttribute('data-theme-gradient');
      
      if (!themeId || !themeGradient) return;

      // Solo cerrar el modal
      themeModal?.classList.add('hidden');
      document.body.style.overflow = '';
    });
  });
</script> 