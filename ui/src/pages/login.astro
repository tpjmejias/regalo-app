---
import Layout from '../layouts/Layout.astro';
import Logo from '../components/Logo.astro';
import { colorThemes } from '../config/theme';

// Por defecto usamos el primer tema
const defaultTheme = colorThemes[0];
---

<Layout title="Iniciar Sesión - LinkGift">
  <div id="pageBackground" class={`min-h-screen bg-gradient-to-br ${defaultTheme.gradient}`}>
    <div class="min-h-screen bg-white/95 backdrop-blur-sm flex flex-col items-center">
      <div class="w-full max-w-md mx-auto px-4 pt-20">
        <!-- Login Form -->
        <div class="text-center mb-12">
          <Logo size="lg" class="justify-center mb-8" />
          <h1 class="text-3xl font-bold text-gray-900 mb-4">Inicia sesión</h1>
          <p class="text-gray-600">Usa tu número de teléfono para acceder a tu lista de regalos</p>
        </div>

        <div id="loginContainer" class="space-y-6">
          <!-- Phone Input -->
          <div class="relative">
            <div class="iti-container-wrapper">
              <input
                type="tel"
                id="phone"
                class="w-full px-4 py-4 text-lg border-2 border-gray-200 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all text-center"
                placeholder="Ingresa tu número de teléfono..."
                required
              />
            </div>
            <div id="phoneError" class="absolute left-0 right-0 top-full mt-2 text-sm text-red-500 text-center hidden"></div>
          </div>

          <button
            id="sendCodeBtn"
            data-use-theme
            data-base-classes="w-full px-8 py-4 text-lg font-medium rounded-xl text-white bg-gradient-to-r hover:opacity-90 transition-all shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 flex items-center justify-center gap-2"
            class={`w-full px-8 py-4 text-lg font-medium rounded-xl text-white bg-gradient-to-r ${defaultTheme.gradient} hover:opacity-90 transition-all shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 flex items-center justify-center gap-2`}
          >
            <span>Enviar código</span>
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
            </svg>
          </button>
        </div>

        <!-- Verification Code Form -->
        <div id="verificationContainer" class="space-y-6 hidden">
          <div class="text-center mb-8">
            <h2 class="text-2xl font-bold text-gray-900 mb-2">Verifica tu número</h2>
            <p class="text-gray-600">
              Hemos enviado un código de verificación a 
              <span id="confirmationPhone" class="font-medium"></span>
            </p>
          </div>

          <div class="relative">
            <input
              type="text"
              id="code"
              class="w-full px-4 py-4 text-lg border-2 border-gray-200 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all text-center tracking-widest"
              placeholder="Ingresa el código..."
              maxlength="6"
              required
            />
            <div id="codeError" class="absolute left-0 right-0 top-full mt-2 text-sm text-red-500 text-center hidden"></div>
          </div>

          <button
            id="verifyCodeBtn"
            data-use-theme
            data-base-classes="w-full px-8 py-4 text-lg font-medium rounded-xl text-white bg-gradient-to-r hover:opacity-90 transition-all shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 flex items-center justify-center gap-2"
            class={`w-full px-8 py-4 text-lg font-medium rounded-xl text-white bg-gradient-to-r ${defaultTheme.gradient} hover:opacity-90 transition-all shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 flex items-center justify-center gap-2`}
          >
            <span>Verificar código</span>
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </button>

          <button
            id="resendCodeBtn"
            class="w-full px-8 py-4 text-lg font-medium rounded-xl text-gray-700 bg-white hover:bg-gray-50 border-2 border-gray-200 hover:border-gray-300 transition-all"
          >
            Reenviar código
          </button>

          <button
            id="changePhoneBtn"
            class="w-full text-gray-500 hover:text-gray-700 transition-colors"
          >
            Cambiar número de teléfono
          </button>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Recuperar y aplicar el tema guardado
  const savedTheme = localStorage.getItem('linkgift:theme');
  if (savedTheme) {
    const pageBackground = document.getElementById('pageBackground');
    if (pageBackground) {
      pageBackground.className = `min-h-screen bg-gradient-to-br ${savedTheme}`;
    }
    // Actualizar otros elementos que usen el tema (botones, etc)
    const themeElements = document.querySelectorAll('[data-use-theme]');
    themeElements.forEach(element => {
      if (element instanceof HTMLElement) {
        const baseClasses = element.dataset.baseClasses || '';
        element.className = `${baseClasses} ${savedTheme}`;
      }
    });
  }

  import intlTelInput from 'intl-tel-input';
  import 'intl-tel-input/build/css/intlTelInput.css';
  import { auth } from '../config/firebase';
  import { RecaptchaVerifier, signInWithPhoneNumber } from 'firebase/auth';

  let confirmationResult: any = null;

  // Inicializar el input de teléfono
  const phoneInput = document.getElementById('phone') as HTMLInputElement;
  if (phoneInput) {
    const iti = intlTelInput(phoneInput, {
      preferredCountries: ['mx'],
      separateDialCode: true,
      utilsScript: 'https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.js',
      customContainer: "w-full flex justify-center"
    });

    // Elementos del DOM
    const loginContainer = document.getElementById('loginContainer');
    const verificationContainer = document.getElementById('verificationContainer');
    const confirmationPhoneSpan = document.getElementById('confirmationPhone');
    const phoneError = document.getElementById('phoneError');
    const codeError = document.getElementById('codeError');
    const sendCodeBtn = document.getElementById('sendCodeBtn');
    const verifyCodeBtn = document.getElementById('verifyCodeBtn');
    const resendCodeBtn = document.getElementById('resendCodeBtn');
    const changePhoneBtn = document.getElementById('changePhoneBtn');
    const codeInput = document.getElementById('code') as HTMLInputElement;

    // Función para mostrar errores
    const showError = (element: HTMLElement | null, message: string) => {
      if (element) {
        element.textContent = message;
        element.classList.remove('hidden');
      }
    };

    // Función para ocultar errores
    const hideError = (element: HTMLElement | null) => {
      if (element) {
        element.classList.add('hidden');
      }
    };

    // Función para cambiar entre formularios
    const toggleForms = (showVerification: boolean) => {
      if (loginContainer && verificationContainer) {
        if (showVerification) {
          loginContainer.classList.add('hidden');
          verificationContainer.classList.remove('hidden');
        } else {
          loginContainer.classList.remove('hidden');
          verificationContainer.classList.add('hidden');
        }
      }
    };

    // Inicializar reCAPTCHA
    const initRecaptcha = () => {
      if (!window.recaptchaVerifier) {
        window.recaptchaVerifier = new RecaptchaVerifier(auth, 'sendCodeBtn', {
          size: 'invisible',
        });
      }
    };

    // Enviar código
    const sendCode = async () => {
      if (!iti.isValidNumber()) {
        showError(phoneError, 'Por favor, ingresa un número válido');
        return;
      }

      try {
        hideError(phoneError);
        const phoneNumber = iti.getNumber();
        
        initRecaptcha();
        confirmationResult = await signInWithPhoneNumber(
          auth, 
          phoneNumber,
          window.recaptchaVerifier
        );
        
        if (confirmationPhoneSpan) {
          confirmationPhoneSpan.textContent = phoneNumber;
        }
        
        toggleForms(true);
      } catch (error) {
        console.error('Error:', error);
        showError(phoneError, 'Error al enviar el código. Por favor, intenta de nuevo.');
      }
    };

    // Verificar código
    const verifyCode = async () => {
      if (!codeInput || !confirmationResult) return;
      
      const code = codeInput.value.trim();
      if (!code) {
        showError(codeError, 'Por favor, ingresa el código');
        return;
      }

      try {
        hideError(codeError);
        const result = await confirmationResult.confirm(code);
        // Guardar información de autenticación
        localStorage.setItem('linkgift:auth', JSON.stringify({
          phoneNumber: result.user.phoneNumber,
          uid: result.user.uid,
          isAuthenticated: true
        }));
        window.location.href = '/dashboard';
      } catch (error) {
        console.error('Error:', error);
        showError(codeError, 'Código inválido. Por favor, intenta de nuevo.');
      }
    };

    // Event Listeners
    sendCodeBtn?.addEventListener('click', sendCode);
    verifyCodeBtn?.addEventListener('click', verifyCode);
    resendCodeBtn?.addEventListener('click', sendCode);
    changePhoneBtn?.addEventListener('click', () => toggleForms(false));

    // Manejar Enter en los inputs
    phoneInput?.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') sendCode();
    });

    codeInput?.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') verifyCode();
    });

    // Formatear input de código
    codeInput?.addEventListener('input', (e) => {
      const input = e.target as HTMLInputElement;
      input.value = input.value.replace(/\D/g, '').substring(0, 6);
    });

    // Verificar si ya está autenticado
    const authData = localStorage.getItem('linkgift:auth');
    if (authData) {
      const auth = JSON.parse(authData);
      if (auth.isAuthenticated) {
        window.location.href = '/dashboard';
      }
    }
  }
</script>

<style>
  /* Ajustes para el input de teléfono */
  .iti {
    width: 100%;
  }

  .iti__flag {
    background-image: url("https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/img/flags.png");
  }

  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    .iti__flag {
      background-image: url("https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/img/flags@2x.png");
    }
  }

  /* Centrar el control de teléfono */
  .iti-container {
    position: fixed;
    left: 50% !important;
    transform: translateX(-50%);
    z-index: 50;
  }

  .iti-container-wrapper {
    position: relative;
  }

  /* Ajustes adicionales para centrar */
  .iti.iti--container {
    position: fixed;
    top: 50%;
    transform: translate(-50%, -50%);
  }

  .iti__selected-flag {
    padding-left: 12px !important;
  }

  .iti__flag-container {
    padding: 0 !important;
  }

  /* Ajustar el input para que el texto esté centrado */
  input[type="tel"] {
    padding-left: 80px !important;
    text-align: center !important;
  }
</style> 